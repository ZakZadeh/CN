# libraries
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
import pandas as pd
 
# y-axis in bold
rc('font', weight='bold')

s = 1

# Values of each group
class1 = [s, s, s, s, 0]
class2 = [s, s, 0, s, s]
class3 = [s, 0, 0, s, s]
class4 = [s, s, s, 0, s]
 
# Find sum of heights of lower bars
h2 = class1
h3 = np.add(class1,class2)
h4 = np.add(h3,class3)

# The position of the bars on the x-axis
r = [0,1,2,3,4]
 
# Names of group and bar width
names = ['1','2','3','4','5']
barWidth = 0.5
 
# Create brown bars
plt.bar(r, class1, color = '#7f6d5f', edgecolor='white', width=barWidth)
# Create green bars (middle), on top of the firs ones
plt.bar(r, class2, bottom = h2, color='#557f2d', edgecolor='white', width=barWidth)
# Create green bars (top)
plt.bar(r, class3, bottom = h3, color='#2d7f5e', edgecolor='white', width=barWidth)
plt.bar(r, class4, bottom = h4, color='#2d7a5e', edgecolor='white', width=barWidth)
 
# Custom X axis
plt.xticks(r, names, fontweight='bold')
plt.xlabel("Sequences")
 
# Show graphic
plt.show()

import os

# train_Res10
f = open('train_Res10.log','r')
t = f.read()
t = t.rsplit()
f.close()

train_Res10 = np.zeros(50, dtype=float)

for i in range(len(mm)):
    if (i >= 5):
        if ((i-1)%4 == 0):
            j = int((i-1)/4)
            train_Res10[j-1] = mm[i]
            
# train_Res10K
f = open('train_Res10.log','r')
t = f.read()
t = t.rsplit()
f.close()

train_Res10 = np.zeros(50, dtype=float)

for i in range(len(mm)):
    if (i >= 5):
        if ((i-1)%4 == 0):
            j = int((i-1)/4)
            train_Res10[j-1] = mm[i]
            
# train_Res18
f = open('train_Res10.log','r')
t = f.read()
t = t.rsplit()
f.close()

train_Res10 = np.zeros(50, dtype=float)

for i in range(len(mm)):
    if (i >= 5):
        if ((i-1)%4 == 0):
            j = int((i-1)/4)
            train_Res10[j-1] = mm[i]
            
# train_ResX50
f = open('train_Res10.log','r')
t = f.read()
t = t.rsplit()
f.close()

train_Res10 = np.zeros(50, dtype=float)

for i in range(len(mm)):
    if (i >= 5):
        if ((i-1)%4 == 0):
            j = int((i-1)/4)
            train_Res10[j-1] = mm[i]

train_Res10K = [1.721742992930942, 1.3414578835169475, 1.1333361281288994, 
                0.9538907210032145, 0.7560698959562514, 0.6066935804155138, 
                0.479603193865882, 0.4827582988474104, 0.35150426626205444, 
                0.3424318253993988, 0.2430328137344784, 0.1795378373728858, 
                0.19106222722265456, 0.17602181567086114, 0.20534875392913818, 
                0.18140383230315316, 0.2148452858130137, 0.09433761239051819,
                0.11520425346162584, 0.06362538403934903, 0.0657359884844886, 
                0.07160101665390863, 0.07793040341801113, 0.07159534295399984, 
                0.07305054333474902, 0.056879713137944536, 0.0463657557964325, 
                0.05911692910724216, 0.0393367522292667, 0.055723624096976385, 
                0.09137437343597413, 0.08143741091092428, 0.05637535916434394, 
                0.06227545340855916, 0.04251120090484619, 0.03771288527382745, 
                0.03961594435903761, 0.03555979662471347, 0.0713181045320299, 
                0.05791056553522746, 0.026854668060938516, 0.030651558107799955, 
                0.03508412043253581, 0.03815256953239441, 0.037901657157474095, 
                0.03369166784816318, 0.07111532886823019, 0.05119152466456096, 
                0.036020076274871825, 0.04516872300042046]

train_Res18 = [10.810725371042887, 4.1864164246453175, 3.4312466859817503, 
               2.267464261584812, 2.1351277033487954, 2.3797759056091308, 
               1.7291999128129747, 1.491215048895942, 1.659227344724867, 
               1.6461443265279134, 1.5540017339918348, 1.601647064420912, 
               1.4672904835806952, 1.4277245627509223, 1.4369066635767618, 
               1.4749942302703858, 1.479988956451416, 1.413751072353787, 
               1.4892411205503675, 1.4862018797132703, 1.3801529142591689, 
               1.3544233957926433, 1.320485578642951, 1.2797537989086576, 
               1.2523787869347467, 1.2461865345637004, 1.2503958013322618, 
               1.2250778569115532, 1.2241862800386216, 1.2159910334481134, 
               1.2401058726840548, 1.2257186386320327, 1.2071159601211547, 
               1.2087210893630982, 1.2152771102057562, 1.229907841152615, 
               1.1727694431940714, 1.212480608622233, 1.2019164482752482, 
               1.2008336438073053, 1.1917797194586859, 1.1954999102486505, 
               1.206824779510498, 1.180698808034261, 1.2090007331636217, 
               1.1861540423499213, 1.1837028397454157, 1.2156165096494886, 
               1.176432532734341, 1.174591178364224]

train_ResX50 = [14.101897917853462, 7.523525068495009, 15.067938741048177, 
                15.35836418999566, 11.654083887736002, 8.04049121008979,
                2.84102324379815, 4.2773341337839765, 4.3697287665473095, 
                3.7766058444976807, 4.836458492279053, 4.225661553276909, 
                4.290624017185635, 2.0704782909817165, 2.0621559037102593, 
                3.0957884894476995, 2.9504015816582574, 3.1648204803466795, 
                3.28031284544203, 3.0812772538926865, 1.9526647090911866, 
                2.8222434573703343, 2.8339662233988445, 2.3192880312601725, 
                2.4807877328660752, 2.667328792148166, 1.6148830201890734, 
                1.5121518399980334, 1.3753847122192382, 1.3880277845594617, 
                1.4201812320285374, 1.3126622252994113, 1.3351930326885648,
                1.3646292077170479, 1.4187447071075439, 1.3978321870168051, 
                1.390579096476237, 1.3592192570368449, 1.365275494257609, 
                1.3430380079481337, 1.3415339205000136, 1.3349853144751656, 
                1.3577352894677057, 1.314682001537747, 1.353626839319865, 
                1.3886143498950534, 1.3515651199552747, 1.3107395966847737, 
                1.3438461303710938, 1.3592596424950494] 

# plotting 
plt.plot(train_Res10,  label = "Res10K")
plt.plot(train_Res10K, label = "Res10")
plt.plot(train_Res18,  label = "Res18") 
plt.plot(train_ResX50, label = "ResX50") 

# naming the x axis 
plt.xlabel('epochs') 
# naming the y axis 
plt.ylabel('loss') 
# giving a title to my graph 
plt.title('Training loss') 
  
# show a legend on the plot 
plt.legend() 
  
# function to show the plot 
plt.show() 


valid_ResX50 = [6063296.666666667/200000, 169878.69180253622/20000, 21103.46490036232/20000,
                763.7648384536521/20, 94.124150103417/3, 15.655117504838584, 
                12.808649425921233, 76.75169722584711/2, 29.56975431718688, 
                32.13207289619722, 20.047602147295855, 11.747634991355564, 
                3.0865156840587007, 2.9413476802300718, 3.1734661028005076, 
                4.786566190097643, 6.911919206812762, 5.692684060421543, 
                5.915772614271744, 10.713450768719548, 6.501942921375883, 
                15.047109662622645, 5.8499830218328945, 6.164923512417337, 
                4.032528637112051, 6.038563165111818, 4.334572702214338, 
                1.7210292747055276, 3.227322514506354, 1.6318394654039023, 
                3.283794503281082, 3.503110016601673, 1.7741547529248223, 
                4.954303900400798, 4.48113016805787, 6.118087258891783, 
                1.7265343493309573, 2.979389106017956, 3.526211735131084,
                3.070917575255684, 1.428292749584585, 2.222276742907538, 
                2.2502003666283428, 2.024459365485371, 1.7368654410044353, 
                2.2117590817852295, 2.7246735337851704, 2.1089262789574224, 
                2.2862602282261504, 3.59518145305523]

# plotting the line 2 points  
plt.plot(valid_ResX50, label = "valid ResX50") 